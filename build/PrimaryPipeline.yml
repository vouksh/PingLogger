# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  project: 'PingLogger.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  sfOutputDirectory: '$(Pipeline.Workspace)/s/bin/Release/net8.0/Win64-SF/'
  installerOutputDirectory: '$(Pipeline.Workspace)/s/bin/Release/net8.0/Win64'
  clickOnceOutputDirectory: '$(Pipeline.Workspace)/s/bin/Release/net8.0/app.publish/'
  linuxOutputDirectory: '$(Pipeline.Workspace)/s/bin/Release/net8.0/Linux/'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 8.x
    performMultiLevelLookup: true

- task: AssembyInfoReader@3
  displayName: 'Read Assembly version'
  inputs:
    searchPattern: '**\AssemblyInfo.cs'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  displayName: 'Inno setup download'
  inputs:
    targetType: 'inline'
    script: 'choco install innosetup'

- script: dotnet build --configuration $(buildConfiguration) /p:LINUX_BUILD=true
  displayName: 'Build Application for linux'

- script: dotnet publish $(project) --configuration $(buildConfiguration) /p:LINUX_BUILD=true;PublishProfile=Linux-x64 -o $(linuxOutputDirectory)
  displayName: 'Generate Linux binaries'

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'Build Application'

- script: dotnet publish $(project) --configuration $(buildConfiguration) /p:PublishProfile=Win64-SF -o $(sfOutputDirectory)
  displayName: 'Generate Single File'

- task: ArchiveFiles@2
  displayName: 'Compress Single File output'
  inputs:
    rootFolderOrFile: '$(sfOutputDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)/win/sf/PingLogger.zip'
    replaceExistingArchive: true

- task: ArchiveFiles@2
  displayName: 'Compress Linux binaries'
  inputs:
    rootFolderOrFile: '$(linuxOutputDirectory)'
    includeRootFolder: false
    archiveType: 'tar'
    tarCompression: 'bz2'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)/linux/pinglogger_v$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)_amd64.tar.bz2'
    replaceExistingArchive: true

- script: dotnet publish $(project) --configuration $(buildConfiguration) /p:PublishProfile=Win64 -o $(installerOutputDirectory)
  displayName: 'Generate Installer Files'
  
- task: CopyFiles@2
  displayName: 'Copy installer script to base dir'
  inputs:
    SourceFolder: 'Installer/'
    Contents: 'installscript.iss'
    TargetFolder: '$(Pipeline.Workspace)/s/'

- task: PowerShell@2
  displayName: 'Execute Inno Setup script'
  inputs:
    targetType: 'inline'
    script: 'iscc.exe /DMyAppVersion="$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)" installscript.iss'

- task: CopyFiles@2
  displayName: 'Copy Setup to artifact'
  inputs:
    SourceFolder: 'Installer/Output'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)/win/setup/'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:ApplicationVersion=$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build).* /t:Publish /p:PublishProfile=ClickOnceProfile'

- task: CopyFiles@2
  displayName: 'Copy ClickOnce files to artifact'
  inputs:
    SourceFolder: '$(clickOnceOutputDirectory)'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/clickonce'

- task: CopyFiles@2
  displayName: 'Copy latest.json to staging'
  inputs:
    SourceFolder: 'Installer/'
    Contents: 'latest.json'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/'

- task: GitHubRelease@1
  displayName: 'Publish release to GitHub'
  inputs:
    gitHubConnection: 'GitHub PAT'
    repositoryName: 'vouksh/PingLogger'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)'
    title: 'PingLogger v$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)'
    releaseNotesFilePath: '$(Pipeline.Workspace)/s/RELEASE.md'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      $(Build.ArtifactStagingDirectory)/$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)/win/sf/*.zip
      $(Build.ArtifactStagingDirectory)/$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)/win/setup/*.exe
      $(Build.ArtifactStagingDirectory)/$(AssemblyInfo.AssemblyVersion.Major).$(AssemblyInfo.AssemblyVersion.Minor).$(AssemblyInfo.AssemblyVersion.Build)/linux/*.tar.bz2

- task: PublishPipelineArtifact@1
  displayName: 'publish artifact'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    publishLocation: 'pipeline'

- task: FtpUpload@2
  inputs:
    credentialsOption: 'serviceEndpoint'
    serverEndpoint: 'PingLogger FTP'
    rootDirectory: '$(Build.ArtifactStagingDirectory)'
    filePatterns: '**'
    remoteDirectory: '/'
    clean: false
    cleanContents: false
    preservePaths: true
    trustSSL: true